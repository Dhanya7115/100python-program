{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aebbf668-c1d1-4d30-a033-ace6e00dc576",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Contact Book\n",
      "1. Add Contact\n",
      "2. View Contacts\n",
      "3. Delete Contact\n",
      "4. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Enter your choice (1-4):  1\n",
      "Enter contact name:  DHANU\n",
      "Enter contact number:  9698668396\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Contact 'DHANU' added successfully!\n",
      "\n",
      "Contact Book\n",
      "1. Add Contact\n",
      "2. View Contacts\n",
      "3. Delete Contact\n",
      "4. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Enter your choice (1-4):  1\n",
      "Enter contact name:  KEERTHU\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import sys\n",
    "\n",
    "CONTACTS_FILE = \"contacts.txt\"  # File to store contacts\n",
    "\n",
    "# Load contacts from file\n",
    "def load_contacts():\n",
    "    if os.path.exists(CONTACTS_FILE):\n",
    "        with open(CONTACTS_FILE, \"r\") as file:\n",
    "            return [line.strip() for line in file.readlines()]\n",
    "    return []\n",
    "\n",
    "# Save contacts to file\n",
    "def save_contacts(contacts):\n",
    "    with open(CONTACTS_FILE, \"w\") as file:\n",
    "        file.writelines(\"\\n\".join(contacts))\n",
    "\n",
    "# Add a new contact\n",
    "def add_contact():\n",
    "    name = input(\"Enter contact name: \")\n",
    "    phone = input(\"Enter contact number: \")\n",
    "   \n",
    "    contact = f\"{name}: {phone}\"\n",
    "    contacts = load_contacts()\n",
    "    contacts.append(contact)\n",
    "    save_contacts(contacts)\n",
    "   \n",
    "    print(f\"Contact '{name}' added successfully!\")\n",
    "\n",
    "# View all contacts\n",
    "def view_contacts():\n",
    "    contacts = load_contacts()\n",
    "    if not contacts:\n",
    "        print(\"No contacts available.\")\n",
    "    else:\n",
    "        print(\"\\nContact List:\")\n",
    "        for idx, contact in enumerate(contacts, start=1):\n",
    "            print(f\"{idx}. {contact}\")\n",
    "\n",
    "# Delete a contact\n",
    "def delete_contact():\n",
    "    view_contacts()\n",
    "    contacts = load_contacts()\n",
    "   \n",
    "    if not contacts:\n",
    "        return\n",
    "\n",
    "    try:\n",
    "        contact_number = int(input(\"Enter contact number to delete: \")) - 1\n",
    "        if 0 <= contact_number < len(contacts):\n",
    "            removed_contact = contacts.pop(contact_number)\n",
    "            save_contacts(contacts)\n",
    "            print(f\"Deleted contact: {removed_contact}\")\n",
    "        else:\n",
    "            print(\"Invalid contact number.\")\n",
    "    except ValueError:\n",
    "        print(\"Please enter a valid number.\")\n",
    "\n",
    "# Display menu\n",
    "def display_menu():\n",
    "    print(\"\\nContact Book\")\n",
    "    print(\"1. Add Contact\")\n",
    "    print(\"2. View Contacts\")\n",
    "    print(\"3. Delete Contact\")\n",
    "    print(\"4. Exit\")\n",
    "\n",
    "# Main program loop\n",
    "while True:\n",
    "    display_menu()\n",
    "    choice = input(\"\\nEnter your choice (1-4): \")\n",
    "\n",
    "    if choice == \"1\":\n",
    "        add_contact()\n",
    "    elif choice == \"2\":\n",
    "        view_contacts()\n",
    "    elif choice == \"3\":\n",
    "        delete_contact()\n",
    "    elif choice == \"4\":\n",
    "        print(\"Exiting Contact Book. Goodbye!\")\n",
    "        sys.exit()\n",
    "    else:\n",
    "        print(\"Invalid choice. Please try again.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b133e40-5188-4a60-bb60-7391a13cdcf2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
